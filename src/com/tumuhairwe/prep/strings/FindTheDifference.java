package com.tumuhairwe.prep.strings;

import java.util.HashMap;
import java.util.Map;

/**
 * LeetCode 389 (easy)
 *
 * You are given two strings S_ource and T_ransformed.
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 *
 * Return the letter that was added to t.
 *
 * Solution Summary
 * - Create a Char frequency map of both strings
 * - Iterate over each character in t_ransformed ... and check if the frequency matches the frequency in S-ource's map
 * - if character doesn't exist in S-ource, return that character
 */
public class FindTheDifference {
    public static void main(String[] args) {
        char missing = findTheDifference("a", "aa");
        System.out.println(missing);
    }
    static public char findTheDifference(String s, String t) {
        // 0. create char frequency map  of s   TC: O(n)
        Map<Character, Integer> freqMap_s = new HashMap<>();
        for(int i=0; i<s.toCharArray().length; i++){
            char c = s.toCharArray()[i];
            int existingCount = freqMap_s.getOrDefault(c, 0);

            freqMap_s.put(c, existingCount + 1);
        }

        Map<Character, Integer> freqMap_t = new HashMap<>();
        for(int i=0; i<t.toCharArray().length; i++){
            char c = t.toCharArray()[i];
            int existingCount = freqMap_t.getOrDefault(c, 0);

            freqMap_t.put(c, existingCount + 1);
        }

        char result = ' ';
        for(int i=0; i < t.toCharArray().length; i++){
            char c = t.toCharArray()[i];

            if(!freqMap_s.containsKey(c) || freqMap_s.get(c) < freqMap_t.get(c)){
                result = c;
                break;
            }
        }

        // 1. sort both chars TC: O(n log n)
        //  char[] s_chars = s.toCharArray();
        //  Arrays.sort(s_chars);
        //  String sorted_s = new String(s_chars);

        //  char[] t_chars = t.toCharArray();
        //  Arrays.sort(t_chars);
        //  String sorted_t = new String(t_chars);

        //  // 2. find foreign char
        //  for(int i =0; i < sorted_t.length(); i++){
        //     if(i < sorted_s.length() && sorted_s.toCharArray()[i] != sorted_t.toCharArray()[i]){
        //         result = sorted_t.toCharArray()[i];
        //         return result;
        //     }
        //  }

        return result;
    }
}
